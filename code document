import sys 
<br>sys.setrecursionlimit(100000000)

<br>#Floyd’s algorithm
<br>def floyd():
<br>n=len(graph)
<br>for k in range(n) :
<br>for i in range(n) :
<br>for j in range(n) :

<br>if graph [i][k] + graph [k][j] < graph [i][j] :
<br>graph [i][j] = graph[i][k] + graph [k][j]
<br>parents [i][j] = parents [k][j] 

<br>#print all the paths 
<br>def print_path (I, j) : 
<br>if i!= j :
<br>print_path(I, parents[i][j])
<br>print(j, end=‘—>’)

<br>The data sets for the testing have been shown as below :

<br>#data [u,v,cost]
<br>#cost refers to the weight of the edge 

<br>Datas = [
<br>[0,1,2],
<br>[0,2,6],
<br>[0,3,4],
<br>[1,2,3],
<br>[2,0,7],
<br>[2,3,1],
<br>[3,2,12],
<br>]

<br>n=4

<br>#the number below is the number for infinity 
<br>Inf = 9999999999

<br>#below is the code for producing the graph
<br>graph = [[(lambda x : 0 if x [0] == x [1] else inf)([I, j]) for j in range (n)] for i in range (n)]
<br>Parents = [[I] * n for i in range (4)] 
<br>for u, v, c in datas :
<br>graph [u][v] = c

<br>floyd ()
<br>print(‘Costs :’)
<br>for now in graph :
<br>for e in row :
<br>print (‘∞’ if e == inf else e, end=‘\t’)
<br>print ()

<br>print (‘\nPath:’)
<br>for i in range (n) :
<br>for j in range (n) :
<br>Print (‘path ({} —> {}) : ‘.format(I,j), end =‘ ‘)
<br>Print_path(i, j)
<br>print(‘cost:’, graph[I][j])

<br>#results for the graph which has been produced 
<br># the shortest path refers to graph [i][j] —> j
<br>0 2    5     4
<br>9 0    3     4
<br>6 8    0     1
<br>5 7   10     0

<br>#the cost for each path 
<br>#Path:
<br>Path(0—>0) : 0—> cost : 0
<br>Path(0—>1) : 0—> cost : 2
<br>Path(0—>2) : 0—>1—>2—> cost: 5
<br>Path(0—>3) : 0—>3—> cost : 4
<br>Path(1—>0) : 1—>2—>3—>0—> cost : 9
<br>Path(1—>1) : 1—> cost : 0
<br>Path(1—>3) : 1—>2—>3—> cost : 4
<br>Path(2—>0) : 2—>3—>0—> cost : 6
<br>Path(2—>1) : 2—>3—>0—>1—> cost : 8
<br>Path(2—>2) : 2—> cost : 0
<br>Path(2—>3) : 2—>3—> cost : 1
<br>Path(3—>0) : 3—>0—> cost : 5
<br>Path(3—>1) : 3—>0—>1—> cost : 7

